/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "./gcd_dest_m.v:70" *)
module gcd_dest_m(clk, reset, start, Ain, Bin, nequiv);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  (* src = "./gcd_dest_m.v:76" *)
  input [1:0] Ain;
  (* src = "./gcd_dest_m.v:77" *)
  input [1:0] Bin;
  (* src = "./gcd_dest_m.v:78" *)
  wire [1:0] Out_1;
  (* src = "./gcd_dest_m.v:79" *)
  wire [1:0] Out_2;
  (* src = "./gcd_dest_m.v:71" *)
  input clk;
  (* src = "./gcd_dest_m.v:72" *)
  wire clk_1;
  (* src = "./gcd_dest_m.v:73" *)
  wire clk_2;
  (* src = "./gcd_dest_m.v:84" *)
  output nequiv;
  (* src = "./gcd_dest_m.v:74" *)
  input reset;
  (* src = "./gcd_dest_m.v:75" *)
  input start;
  (* src = "./gcd_dest_m.v:80" *)
  wire valid_1;
  (* src = "./gcd_dest_m.v:81" *)
  wire valid_2;
  assign _00_ = ~(valid_1 & valid_2);
  assign _01_ = ~(Out_2[0] ^ Out_1[0]);
  assign _02_ = ~(Out_2[1] ^ Out_1[1]);
  assign nequiv = ~((_02_ & _01_) | _00_);
  assign _03_ = valid_1 & ~(valid_2);
  assign clk_1 = clk & ~(_03_);
  assign _04_ = valid_2 & ~(valid_1);
  assign clk_2 = clk & ~(_04_);
  (* module_not_derived = 32'd1 *)
  (* src = "./gcd_dest_m.v:96" *)
  gcd_fast_m fast_m (
    .Ain(Ain),
    .Bin(Bin),
    .Out(Out_1),
    .clk(clk_1),
    .reset(reset),
    .start(start),
    .valid(valid_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./gcd_dest_m.v:106" *)
  gcd_slow_m slow_m (
    .Ain(Ain),
    .Bin(Bin),
    .Out(Out_2),
    .clk(clk_2),
    .reset(reset),
    .start(start),
    .valid(valid_2)
  );
endmodule

(* src = "./gcd_dest_m.v:1" *)
module gcd_fast_m(clk, reset, start, Ain, Bin, Out, valid);
  (* src = "./gcd_dest_m.v:9" *)
  wire [1:0] _00_;
  (* src = "./gcd_dest_m.v:9" *)
  wire [1:0] _01_;
  (* src = "./gcd_dest_m.v:9" *)
  wire [1:0] _02_;
  (* src = "./gcd_dest_m.v:9" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  (* src = "./gcd_dest_m.v:7" *)
  reg [1:0] A;
  (* src = "./gcd_dest_m.v:3" *)
  input [1:0] Ain;
  (* src = "./gcd_dest_m.v:7" *)
  reg [1:0] B;
  (* src = "./gcd_dest_m.v:3" *)
  input [1:0] Bin;
  (* src = "./gcd_dest_m.v:4" *)
  output [1:0] Out;
  reg [1:0] Out;
  (* src = "./gcd_dest_m.v:2" *)
  input clk;
  (* src = "./gcd_dest_m.v:2" *)
  input reset;
  (* src = "./gcd_dest_m.v:2" *)
  input start;
  (* src = "./gcd_dest_m.v:5" *)
  output valid;
  reg valid;
  assign _04_ = B[1] | ~(A[1]);
  assign _05_ = B[1] ^ A[1];
  assign _06_ = B[0] & ~(A[0]);
  assign _07_ = ~((_06_ | _05_) & _04_);
  assign _08_ = ~(B[1] ^ A[1]);
  assign _09_ = B[0] ^ A[0];
  assign _10_ = _08_ & ~(_09_);
  assign _11_ = _07_ & ~(_10_);
  assign _12_ = A[1] & ~(B[1]);
  assign _13_ = A[0] | ~(B[0]);
  assign _14_ = ~((_13_ & _08_) | _12_);
  assign _15_ = _14_ ? Out[0] : A[0];
  assign _16_ = _11_ ? Out[0] : _15_;
  assign _17_ = reset ? Out[0] : _16_;
  assign _02_[0] = start ? Out[0] : _17_;
  assign _18_ = _14_ ? Out[1] : A[1];
  assign _19_ = _11_ ? Out[1] : _18_;
  assign _20_ = reset ? Out[1] : _19_;
  assign _02_[1] = start ? Out[1] : _20_;
  assign _21_ = ~reset;
  assign _22_ = ~((_10_ & _07_) | valid);
  assign _23_ = _21_ & ~(_22_);
  assign _03_ = _23_ & ~(start);
  assign _24_ = _07_ ? B[0] : _09_;
  assign _25_ = _24_ & ~(reset);
  assign _01_[0] = start ? Bin[0] : _25_;
  assign _26_ = ~B[1];
  assign _27_ = A[0] & ~(B[0]);
  assign _28_ = _27_ ^ _08_;
  assign _29_ = _07_ ? _26_ : _28_;
  assign _30_ = _11_ ? _26_ : _29_;
  assign _31_ = _21_ & ~(_30_);
  assign _01_[1] = start ? Bin[1] : _31_;
  assign _32_ = _10_ | _14_;
  assign _33_ = _32_ ? A[0] : _09_;
  assign _34_ = _33_ & ~(reset);
  assign _00_[0] = start ? Ain[0] : _34_;
  assign _35_ = ~A[1];
  assign _36_ = _06_ ^ _08_;
  assign _37_ = _32_ ? _35_ : _36_;
  assign _38_ = _21_ & ~(_37_);
  assign _00_[1] = start ? Ain[1] : _38_;
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      A[0] <= _00_[0];
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      A[1] <= _00_[1];
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      B[0] <= _01_[0];
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      B[1] <= _01_[1];
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      valid <= _03_;
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      Out[0] <= _02_[0];
  (* src = "./gcd_dest_m.v:9" *)
  always @(posedge clk)
      Out[1] <= _02_[1];
endmodule

(* src = "./gcd_dest_m.v:35" *)
module gcd_slow_m(clk, reset, start, Ain, Bin, Out, valid);
  (* src = "./gcd_dest_m.v:43" *)
  wire [1:0] _00_;
  (* src = "./gcd_dest_m.v:43" *)
  wire [1:0] _01_;
  (* src = "./gcd_dest_m.v:43" *)
  wire [1:0] _02_;
  (* src = "./gcd_dest_m.v:43" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  (* src = "./gcd_dest_m.v:41" *)
  reg [1:0] A;
  (* src = "./gcd_dest_m.v:37" *)
  input [1:0] Ain;
  (* src = "./gcd_dest_m.v:41" *)
  reg [1:0] B;
  (* src = "./gcd_dest_m.v:37" *)
  input [1:0] Bin;
  (* src = "./gcd_dest_m.v:38" *)
  output [1:0] Out;
  reg [1:0] Out;
  (* src = "./gcd_dest_m.v:36" *)
  input clk;
  (* src = "./gcd_dest_m.v:36" *)
  input reset;
  (* src = "./gcd_dest_m.v:36" *)
  input start;
  (* src = "./gcd_dest_m.v:39" *)
  output valid;
  reg valid;
  assign _04_ = A[1] & ~(B[1]);
  assign _05_ = ~(B[1] ^ A[1]);
  assign _06_ = A[0] | ~(B[0]);
  assign _07_ = ~((_06_ & _05_) | _04_);
  assign _08_ = ~(B[0] ^ A[0]);
  assign _09_ = _08_ & _05_;
  assign _10_ = ~(_09_ | _07_);
  assign _11_ = _07_ ? Out[0] : A[0];
  assign _12_ = _10_ ? Out[0] : _11_;
  assign _13_ = reset ? Out[0] : _12_;
  assign _02_[0] = start ? Out[0] : _13_;
  assign _14_ = _07_ ? Out[1] : A[1];
  assign _15_ = _10_ ? Out[1] : _14_;
  assign _16_ = reset ? Out[1] : _15_;
  assign _02_[1] = start ? Out[1] : _16_;
  assign _17_ = ~valid;
  assign _18_ = ~((_10_ | _07_) & _17_);
  assign _19_ = _18_ & ~(reset);
  assign _03_ = _19_ & ~(start);
  assign _20_ = ~reset;
  assign _21_ = ~A[0];
  assign _22_ = ~B[0];
  assign _23_ = _07_ ? _21_ : _22_;
  assign _24_ = _20_ & ~(_23_);
  assign _01_[0] = start ? Bin[0] : _24_;
  assign _25_ = B[0] & ~(A[0]);
  assign _26_ = ~(B[1] & A[1]);
  assign _27_ = _20_ & ~(_26_);
  assign _01_[1] = start ? Bin[1] : _27_;
  assign _28_ = _07_ ? _22_ : _21_;
  assign _29_ = _10_ ? _08_ : _28_;
  assign _30_ = _20_ & ~(_29_);
  assign _00_[0] = start ? Ain[0] : _30_;
  assign _31_ = _25_ ^ _05_;
  assign _32_ = ~(B[1] | A[1]);
  assign _33_ = _10_ ? _31_ : _32_;
  assign _34_ = _20_ & ~(_33_);
  assign _00_[1] = start ? Ain[1] : _34_;
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      A[0] <= _00_[0];
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      A[1] <= _00_[1];
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      B[0] <= _01_[0];
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      B[1] <= _01_[1];
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      valid <= _03_;
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      Out[0] <= _02_[0];
  (* src = "./gcd_dest_m.v:43" *)
  always @(posedge clk)
      Out[1] <= _02_[1];
endmodule
